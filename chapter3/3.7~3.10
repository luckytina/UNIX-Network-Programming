3.7 inet_pton和inet_ntop函数
这两个函数中的p（presentation）和n（numeric）分别代表表达式和数字的意思

#include<arpa/inet.h>
int inet_pton(int family, const char* strptr, void *addptr)

const char *inet_ntop(int family, const void *addrptr, char *strptr, size_t len);
这两个函数的famliy参数既可以是AF_INET,也可以是AF_INET6
下面给出这两个函只支持IPv4的简单定义数的简单定义
int inet_pton(int family, const char *strptr, void *addrptr)
{
		if(family == AF_INET)
		{
				struct in_addr in_val;

				if(inet_aton(strptr, &in_val))
				{
					memcpy(addrptr, &in_val,sizeof(struct in_addr));
					return (1);
				}
				return 0;
		}
		error = EAFNOSUPPORT;
		return (-1);
}

const char *inet_ntop(int famuly, const void *addrptr, char *strptr, size_t len)
{
		const u_char *p = (const u_char *) addrptr;
		if(family == AF_INET)
		{
				char temp[INET_ADDRSTRLEN];
				snprintf(temp, sizeof(temp),"%d.%d.%d.%d", p[0],p[1],p[2],p[3]);
				if(strlen(temp) >= len)
				{
						errno = ENOSPC;
						retutn NULL;
				}

				strcpy(strprt, temp);
				return (strptr);
		}
		errno = EAFNOSUPPORT;
		return (NULL);
}

3.8 scok_ntop和相关函数
这个函数是作者自己写的一个函数用于替代inet_ntop函数

3.9 readn writen 和readline函数
ssize_t readn(int fd, void *vptr, size_t n)
{
		size_t	nleft;
		ssize_t nread;
		char 	*prt;
		ptr = vptr;
		nleft = n;
		while(nleft > 0)
		{
				if((nread = read(fd, ptr, nleft)) < 0)
				{
						if(errno == EINTR)
								nread = 0;
						else return -1;
				}
				else if(nread == 0)
				{
						break;
				}
				nleft -= nread;
				prt   += nread;
		}
		return (n - nleft);
}
