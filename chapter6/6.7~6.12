6.7 str_cli函数（再修订版）
void str_cli(FILE *fp, int sockfd)
{
		int		maxfdp1, stdineof;
		fd_set	rset;
		char	buf[MAXLINE];
		int		n;

		stdineof = 0;
		FD_SIZE(&rset);
		for(;;)
		{
				if(stdineof == 0)
						FD_SET(fileno(fp), &rset);
				FD_SET(sockfd, &rset);
				maxfdp1 = max(fileno(fp), sockfd) + 1;
				select(maxfdp1, &rset, NULL, NULL, NULL);

				if(FD_ISSET(sockfd, &rset))
				{
						if((n = read(sockfd, buf,MAXLINE)) == 0)
						{
								if(stdineof ==1)
										return;
								else
										exit(1);
						}

						write(fileno(stdout), buf, n);
				}

				if(FD_ISSET(fileno(fp), &rset))
				{
					if((n = read(fileno(fp), buf, MAXLINE)) == 0)
					{
							stdineof = 1;
							shutdown(sockfd, SHUT_WR);
							FD_CLR(fileno(fp), &rset);
							continue;
					}
					write(sockfd, buf, n);
				}
		}
}

6.8 TCP回射服务器程序（修订版）
我们可以把TCP回射服务器重写成使用select来处理任意客户端的进程程序，而不是为每个客户
派生一个子进程。先让我们查看用以跟踪客户的数据结构。
代码如下所示：
int main(int argc, int **argv)
{
		int 		i, maxi, maxfd, listenfd, connfd, sockfd;
		int 		nready, client[FD_SETSIZE];
		ssize		n;
		fd_set		rset, allset;
		char		buf[MAXLINE];
		socklen_t	clien;
		struct sockaddr_in cliaddr, servaddr;

		listenfd = socket(AF_INET, SOCK_STREAM, 0);

		bzero(&servaddr, sizeof(servaddr));
		servaddr.sin_family = AF_INET;
		servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
		servaddr.sin_port = htons(SERV_PORT);

		bind(listenfd, (struct sockaddr *)&servaddr, sizeof(servaddr));

		listen(listenfd, LISTENQ);

		maxfd = listenfd;

		maxi = -1;

		for(i = 0;i < FD_SETSIZE; i++)
				client[i] = -1;

		FD_ZERO(&allset);
		FD_SET(listenfd, &allset);
		for(;;)
		{
				rset = allset;
				nready = select(maxfd + 1, &rset; NULL; NULL; NULL);

				if(FD_ISSET(listenfd, &rset))
				{
						clilen = sizeof(cliaddr);
						connfd = accept(listenfd, (struct sock *)&cliaddr, &clilen);

						for(i = 0; i < FD_SETSIZE; i++)
						{
								if(client[i] < 0)
								{
										client[i] = connfd;
										break;
								}
						}

						if(i == FD_SETSIZE)
								err_quit("too many clients");
						FD_SET(cinnfd, &allset);
						if(connfd > maxfd)
								maxfd = connfd;
						if(i > maxi)
								maxi = i;


						if(--nready <= 0)
								continue;
				}

				for(i = 0; i <= maxi;i++)
				{
						if((sockfd = client[i]) < 0)
							continue;
						if(FD_ISSET(sockfd, &rset))
						{
								if(FD_ISSET(sockfd, &rset))
								{
										if((n = read(sockfd, buf, MAXLINE)) == 0)
										{
												close(sockfd);
												FD_CLR(sockfd, &allset);
												client[i] = -1;
										}
										else
												write(sockfd, buf, n);

										if(--nready <= 0)
												break;
								}
						}
				}
		}
}


6.9 pselect

6.10 poll函数
#include <poll.h>
int poll(struct pollfd *fdarray, unsigned long nfds, int timeout);

struct poolfd
{
		int fd;
		short events;
		short reventd;
}

6.11 tcp回射服务器程序（再修订版）

6.12 小结

